defmodule MatchmakingChallengeWeb.MatchmakingController do
  use MatchmakingChallengeWeb, :controller

  @spec create(Plug.Conn.t(), map()) :: Plug.Conn.t()
  def create(conn, %{"clubs" => clubs, "bucket_size" => bucket_size})
      when is_list(clubs) do
    render(conn, buckets: split_into_buckets(clubs, bucket_size))
  end

  defp split_into_buckets(clubs, max_bucket_size) do
    clubs
    |> Enum.map(&take_id/1)
    |> Enum.shuffle()
    |> distribute_evenly(max_bucket_size)
    |> Enum.map(&format_buckets/1)
  end

  defp take_id(%{"club_id" => id}), do: %{id: id}
  defp take_id(%{"id" => id}), do: %{id: id}

  defp distribute_evenly(clubs, max_bucket_size) do
    clubs_count = length(clubs)

    # Total number of buckets needed
    # (e.g., 10 clubs รท 4 max size = 3 buckets)
    bucket_count = ceil(clubs_count / max_bucket_size)

    # Emits a sequence of values for the given accumulator.

    # Successive values are generated by calling function with the previous accumulator
    # and it must return a tuple with the current value and next accumulator.
    Stream.unfold(clubs, &split_next_bucket(&1, clubs_count, bucket_count))
  end

  # The enumeration finishes when it returns nil.
  defp split_next_bucket([], _total, _bucket_count), do: nil

  defp split_next_bucket(remaining_clubs, clubs_count, bucket_count) do
    # Number of clubs processed so far
    # (e.g., 10 - 3 = 7 clubs)
    clubs_processed = clubs_count - length(remaining_clubs)
    # Number of buckets created so far
    # (e.g., 7 * 3 รท 10 = 2 buckets)
    buckets_created = div(clubs_processed * bucket_count, clubs_count)
    # Number of buckets remaining
    # (e.g., 3 - 2 = 1 bucket)
    buckets_remaining = bucket_count - buckets_created
    # Calculate size of the last bucket
    # (e.g., 3 clubs รท 1 bucket = 3 clubs)
    bucket_size =
      remaining_clubs
      |> length()
      |> Kernel./(buckets_remaining)
      |> ceil()

    Enum.split(remaining_clubs, bucket_size)
  end

  defp format_buckets(chunk), do: %{metadata: %{size: length(chunk)}, clubs: chunk}
end
